MVP:
Modle:数据、逻辑操作层，负责网络操作，数据库操作，文件操作等耗时操作。
View:界面展示层，负责界面展示，具体表现为Activity、Fragment、自定义View等
Presenter:中间层，连接Modle和View层，同时持有Modle和View接口的引用。
好处：
缺点：代码量增加，接口和文件数增加。
与MVC模式区别：MVC模式下，Activity、Fragment等View层通常还承担着Controller的职责，需要同时负责逻辑处理和显示，代码很容易变得复杂。

RxJava/RxAndroid:异步框架，简洁(逻辑性)，随着代码逻辑越来越复杂，仍可以保持简洁，提高代码可读性和可维护性




Android端 AES+RSA结合实践

基本要求

保证传输数据的安全性
保证数据的完整性
能够验证客户端的身份
基本流程

Android端

服务器端(server)分别生成自己的RSA密钥对,并提供接口给Android客户端获取RSA公钥(rsaPublicKey)
client生成AES密钥(aesKey)
client使用自己的AES密钥(aesKey)对转换为json格式的请求明文数据(data)进行加密，得到加密后的请求数据encryptData
client提供server提供的接口获取RSA公钥(rsaPublicKey)
client使用获取RSA公钥(rsaPublicKey)对AES密钥(aesKey)进行加密，得到encryptAesKey
client将encryptAesKey作为http请求头参数，将加密后的请求数据encryptData作为请求体一起传输给服务器端
服务器端

server响应client的http请求，读取http请求头。获得client传过来的加密后的AES密钥(encryptAesKey)，读取http请求体，获得client传过来的加密后的请求数据(encryptData)。
server使用自己的RSA私钥(rsaPrivateKey)对加密后的AES密钥(encryptAesKey)进行RSA解密，得到AES密钥(aesKey)
使用解密后的AES密钥(aesKey)对加密后的请求数据(encryptData),进行AES解密操作，得到解密后的请求数据(data)，该数据为json格式
对解密后的请求数据(data)进行json解析，然后做相关的响应操作。